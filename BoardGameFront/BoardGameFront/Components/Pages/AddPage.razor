@page "/AdminFront"
@rendermode InteractiveServer
@inject IHttpClientFactory _client;

<h3>AddGame</h3>

<div class="container">
	<form onsubmit="return false">
		<label class="form-label" for="boardTitle">Title</label>
		<input type="text" class="form-control" id="boardTitle" @bind-value=newGame.name />
		<br />

		<label class="form-label" for="minPlayers">Min Number of Players</label>
		<select class="form-select" @bind=newGame.minPlayers>
			<option>1</option>
			<option>2</option>
			<option>3</option>
			<option>4</option>
			<option>5</option>
			<option>6</option>
			<option>7</option>
		</select>
		<br />

		<label class="form-label" for="maxPlayers">Max Number of Players</label>
		<select class="form-select" @bind=newGame.maxPlayers>
			<option>1</option>
			<option>2</option>
			<option>3</option>
			<option>4</option>
			<option>5</option>
			<option>6</option>
			<option>7</option>
			<option>NA</option>
		</select>
		<br />

		<label class="form-label" for="gameTags">Add Game Tags</label>
		<input type="text" id="gameTags" class="form-control col" @bind=gameTag @bind:event="oninput" />
		<button type="button" class="btn-primary col" @onclick=AddTags>Add Tag</button>

		<br />

		<label class="form-label" for="gameDifficulty">Game Difficulty</label>
		<select class="form-select" @bind=newGame.difficulty>
			<option>Easy</option>
			<option>Standard</option>
			<option>Hard</option>
			<option>Expert</option>
		</select>

		<label class="form-label">Add Image</label>
		<input type="file" @bind=gameImage />

		<InputFile OnChange="@LoadFiles" />

		<button type="submit">Submit</button>

	</form>

	<div class="list-group">
		@foreach (var tag in tagList)
		{
			<h4>@tag</h4>
		}
	</div>

</div>

@code {

	private List<string> tagList = new List<string>();
	private string gameTag = string.Empty;

	private byte[] gameImage { get; set; }

	private long maxFileSize = 1024 * 1024 * 3;
	private int maxNumberOfFiles = 1;

	private List<string> errors = new();

	BoardGameModel newGame = new BoardGameModel();

	private IBrowserFile? file;

	private void AddTags()
	{
		if (!string.IsNullOrWhiteSpace(gameTag))
		{
			tagList.Add(gameTag);
			gameTag = "";
		}

	}

	private async Task LoadFiles(InputFileChangeEventArgs e)
	{
		if (e.FileCount > maxNumberOfFiles)
		{
			errors.Add($"Number of files must be less than {maxNumberOfFiles}");
		}

		file = e.File;
	}

	private async void OnSubmit(BoardGameModel gameModel)
	{
		var format = "image/png";
		var resizeImage = await file.RequestImageFileAsync(format, 400, 400);

		string newFileName = Path.GetRandomFileName();
		string imageExtension = Path.GetExtension(file.Name);

		Directory.CreateDirectory(Path.Combine(Environment.CurrentDirectory, "Images"));
		string path = Path.Combine(Environment.CurrentDirectory, "Images");

		Image newImage = new Image
			{
				FileName = newFileName,
				FilePath = path,
				ContentType = imageExtension
			};

		newGame.image = newImage;

		await using FileStream fileStream = new(path, FileMode.Create);
		await file.OpenReadStream(maxFileSize).CopyToAsync(fileStream);

		var convertedList = JsonSerializer.Serialize(tagList);
		newGame.tags = convertedList;

		var client = _client.CreateClient("rootApi");
		await client.PostAsJsonAsync<BoardGameModel>("CreateNewGame", newGame);


	}


}
