@page "/AdminFront"
@rendermode InteractiveServer
@inject IHttpClientFactory _client;

<h3>AddGame</h3>

<div class="container">
	<EditForm Model="newGame" OnValidSubmit="() => OnSubmit(newGame)">
		<label class="form-label" for="boardTitle">Title</label>
		<input type="text" class="form-control" id="boardTitle" @bind=newGame.name />
		<br /> 

		<label class="form-label" for="minPlayers">Min Number of Players</label>
		<select class="form-select" @bind=newGame.minPlayers>
			<option>1</option>
			<option>2</option>
			<option>3</option>
			<option>4</option>
			<option>5</option>
			<option>6</option>
			<option>7</option>
		</select>
		<br />

		<label class="form-label" for="maxPlayers">Max Number of Players</label>
		<select class="form-select" @bind=newGame.maxPlayers>
			<option>1</option>
			<option>2</option>
			<option>3</option>
			<option>4</option>
			<option>5</option>
			<option>6</option>
			<option>7</option>
			<option>NA</option>
		</select>
		<br />

		<label class="form-label" for="gameTags">Add Game Tags</label>


		<input type="text" id="gameTags" class="form-control col" @bind=gameTag @bind:event="onclick"  />
		<button type="button" class="btn-primary col" @onclick=AddTags>Add Tag</button>
		@if (newGame.tags != null)
		{
			@for (int i = 0; i < newGame.tags.Count; i++)
			{
				<input type="text" @bind="newGame.tags[i]" />
			}
		}

		<br />

		<label class="form-label" for="gameDifficulty">Game Difficulty</label>
		<select class="form-select" @bind=newGame.difficulty>
			<option>Easy</option>
			<option>Standard</option>
			<option>Hard</option>
			<option>Expert</option>
		</select>

		<InputFile OnChange="@LoadFiles" value="Load Image"/>

		<label class="form-label" for="gameDescription">Add Description</label>
		<InputTextArea @bind-Value="newGame.description"/>

		<button type="submit" class="btn btn-primary">Submit</button>

	</EditForm>

	<div class="list-group">

		@if (newGame.tags != null)
		{
			@foreach (var tag in newGame.tags)
			{
				<h4>@tag</h4>
			}
		}

	</div>

</div>

@code {

	private string gameTag = string.Empty;

	private long maxFileSize = 1024 * 1024 * 3;
	private int maxNumberOfFiles = 1;

	private List<string> errors = new();

	BoardGameModel newGame = new BoardGameModel();

	private IBrowserFile? file;



	private void AddTags()
	{
		if (!string.IsNullOrWhiteSpace(gameTag))
		{
			newGame.tags.Add(gameTag);
			gameTag = "";
		}

	}

	private async Task LoadFiles(InputFileChangeEventArgs e)
	{
		if (e.FileCount > maxNumberOfFiles)
		{
			errors.Add($"Number of files must be less than {maxNumberOfFiles}");
			return;
		}
		file = e.File;
	}

	private async void OnSubmit(BoardGameModel gameModel)
	{
		var format = "image/png";
		var resizeImage = await file.RequestImageFileAsync(format, 400, 400);

		string newFileName = Path.ChangeExtension(Path.GetRandomFileName(), Path.GetExtension(file.Name));

		string imageExtension = Path.GetExtension(file.Name);
		string currentFileName = Path.GetFileName(file.Name);

		Directory.CreateDirectory(Path.Combine(Environment.CurrentDirectory, "Images"));
		string path = Path.Combine(Environment.CurrentDirectory, "Images", newFileName);

		Image newImage = new Image
			{
				FileName = currentFileName,
				FilePath = path,
				ContentType = imageExtension
			};

		newGame.image = newImage;

		await using FileStream fileStream = new(path, FileMode.Create);
		await file.OpenReadStream(maxFileSize).CopyToAsync(fileStream);


		var client = _client.CreateClient("rootApi");
		await client.PostAsJsonAsync<BoardGameModel>("CreateNewGame", newGame);


	}



}
