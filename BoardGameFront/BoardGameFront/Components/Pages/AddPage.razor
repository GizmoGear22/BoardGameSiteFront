@page "/AdminFront"
@rendermode InteractiveServer
@inject IHttpClientFactory _client;
@inject IConfiguration _config;


<h3>AddGame</h3>

<EditForm Model="newGame" OnValidSubmit="SubmitGame">

	<div>
		<label for="gameName" class="form-label">Title</label>
		<InputText @bind-value="newGame!.name" class="form-control" id="gameName" ValueExpression="() => newGame.name"/>
	</div>

	<div>
		<label class="form-label" for="minPlayers">Minimum Number of Players
		<InputSelect @bind-Value="newGame.minPlayers" class="form-select" id="minPlayers">
			<option value="1">1</option>
			<option value="2">2</option>
			<option value="3">3</option>
			<option value="4">4</option>
			<option value="5">5</option>
			<option value="6">6</option>
		</InputSelect>
		</label>
	</div>

	<div>
		<label class="form-label" for="maxPlayers">Maximum Number of Players</label>
		<InputSelect @bind-Value="newGame.maxPlayers" class="form-select" id="manPlayers">
			<option value="2">2</option>
			<option value="3">3</option>
			<option value="4">4</option>
			<option value="5">5</option>
			<option value="6">6</option>
		</InputSelect>
	</div>

	<label class="form-label" for="difficulty">Game Difficulty</label>
	<InputSelect @bind-Value="newGame.difficulty" class="form-select" id="gameDifficulty">
		@foreach(var difficulty in Enum.GetValues<Difficulty>())
		{
			<option value="@difficulty">@difficulty</option>
		}
	</InputSelect>

	<label class="form-label" for="tags">Game Tags</label>

	<div>
		<label for="gameImage" class="form-label">Upload Image</label>
		<InputFile OnChange="@FileUpload"></InputFile>
	</div>

	<button class="btn btn-primary" type="submit">Submit Game</button>
</EditForm>

@code {

	public BoardGameModel newGame = new BoardGameModel();
	public Image newImage = new Image();

	private IBrowserFile imageFile;
	private long maxFileSize = 1024 * 1024 * 3;
	private int maxNumberOfFiles = 1;



	private void FileUpload(InputFileChangeEventArgs e)
	{
		imageFile = e.File;
	}

	private async Task<string> CaptureFile()
	{
		var newFileName = Path.ChangeExtension(Path.GetRandomFileName(), Path.GetExtension(imageFile.Name));
		Directory.CreateDirectory(Path.Combine(Environment.CurrentDirectory, "Images"));
		var path = Path.Combine(Environment.CurrentDirectory, "Images", newFileName);
		string relativePath = Path.Combine("Images", newFileName);

		await using FileStream fileStream = new FileStream(path, FileMode.Create);
		await imageFile.OpenReadStream(maxFileSize).CopyToAsync(fileStream);

		return relativePath;
	}


	private async Task SubmitGame()
	{
		_client.CreateClient("CreateNewGame");

		string relativePath = await CaptureFile();

		newImage.FilePath = relativePath;

	}

}
