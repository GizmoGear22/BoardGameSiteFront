@page "/AdminFront"
@rendermode InteractiveServer
@inject IConfiguration _config;
@inject APILayer.DataHandlers.IDataHandler _apiHandler;


<h3>AddGame</h3>

<EditForm Model="newGame" OnValidSubmit="SubmitGame">

	<div>
		<label for="gameName" class="form-label">Title</label>
		<InputText @bind-value="newGame!.Name" class="form-control" id="gameName" ValueExpression="() => newGame.Name"/>
	</div>
	<div class="container">
		<div>
			<label class="form-label" for="minPlayers">
				Minimum Number of Players
				<InputSelect @bind-Value="newGame.MinPlayers" class="form-select" id="minPlayers">
					<option value="1">1</option>
					<option value="2">2</option>
					<option value="3">3</option>
					<option value="4">4</option>
					<option value="5">5</option>
					<option value="6">6</option>
				</InputSelect>
			</label>
		</div>

		<div>
			<label class="form-label" for="maxPlayers">Maximum Number of Players</label>
			<InputSelect @bind-Value="newGame.MaxPlayers" class="form-select" id="manPlayers">
				<option value="2">2</option>
				<option value="3">3</option>
				<option value="4">4</option>
				<option value="5">5</option>
				<option value="6">6</option>
			</InputSelect>
		</div>
	</div>


	<label class="form-label" for="difficulty">Game Difficulty</label>
	<InputSelect @bind-Value="newGame.Difficulty" class="form-select" id="gameDifficulty">
		@foreach(var difficulty in Enum.GetValues<Difficulty>())
		{
			<option value="@difficulty">@difficulty</option>
		}
	</InputSelect>

	<label class="form-label" for="tags">Game Tags</label>
	<InputText class="form-text" @bind-Value=newTag></InputText>
	<button type="button" @onclick="AddTag">Add Tag</button>
	<div class="bg-secondary bg-gradient w-25" style="--bs-bg-opacity: 0.5">
		<ul style="list-style-type: none">
			@foreach (var item in tagList)
			{
				<li>@item</li>
			}
		</ul>

	</div>

	<label class="form-label" for="description">Description</label>
	<textarea @bind:event="onchange" @bind=newGame.Description></textarea>


	<div>
		<label for="gameImage" class="form-label">Upload Image</label>
		<InputFile OnChange="@FileUpload"></InputFile>
	</div>

	<button class="btn btn-primary" type="submit">Submit Game</button>
</EditForm>

@code {

	public BoardGameModel newGame = new BoardGameModel();
	public Image newImage = new Image();

	private string newTag = "";
	private List<string> tagList = new List<string>();

	private IBrowserFile imageFile;
	private long maxFileSize = 1024 * 1024 * 3;
	private int maxNumberOfFiles = 1;

	private void AddTag()
	{
		tagList.Add(newTag);
		newGame.Tags = tagList;
		newTag = "";
	}


	private void FileUpload(InputFileChangeEventArgs e)
	{
		imageFile = e.File;
	}

	private async Task<string> CaptureFile()
	{
		var newFileName = Path.ChangeExtension(Path.GetRandomFileName(), Path.GetExtension(imageFile.Name));

		var userDirectory = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile);

		Directory.CreateDirectory(Path.Combine(userDirectory, "Images"));

		var path = Path.Combine(userDirectory, "Images", newFileName);
		string relativePath = Path.Combine("Images", newFileName);

		await using FileStream fileStream = new FileStream(path, FileMode.Create);
		await imageFile.OpenReadStream(maxFileSize).CopyToAsync(fileStream);

		return relativePath;
	}


	private async Task SubmitGame()
	{

		string relativePath = await CaptureFile();

		newGame.ImageLocation = relativePath;

		await _apiHandler.PostNewGame(newGame);

	}

}
